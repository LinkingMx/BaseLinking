<?php

namespace App\Providers;

use App\Models\CustomStyle;
use Illuminate\Support\Facades\Blade;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\View;
use Illuminate\Support\ServiceProvider;

class CustomStyleServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        // Register blade directive for custom styles
        $this->registerBladeDirectives();
        
        // Share custom styles with all views
        $this->shareCustomStylesWithViews();
    }

    /**
     * Register blade directives for custom styles
     */
    protected function registerBladeDirectives(): void
    {
        // @customStyles('frontend') - Inject styles for specific target
        Blade::directive('customStyles', function ($target = 'frontend') {
            $target = trim($target, '"\'');
            return "<?php echo app('custom-styles')->render('{$target}'); ?>";
        });

        // @customStylesInline('admin') - Inject styles inline
        Blade::directive('customStylesInline', function ($target = 'frontend') {
            $target = trim($target, '"\'');
            return "<?php echo app('custom-styles')->renderInline('{$target}'); ?>";
        });
    }

    /**
     * Share custom styles data with views
     */
    protected function shareCustomStylesWithViews(): void
    {
        // Register singleton for custom styles service
        $this->app->singleton('custom-styles', function () {
            return new class {
                /**
                 * Render styles as link tags
                 */
                public function render(string $target = 'frontend'): string
                {
                    if (!$this->hasCustomStylesTable()) {
                        return '';
                    }

                    try {
                        $styles = CustomStyle::active()
                            ->forTarget($target)
                            ->byPriority()
                            ->get();

                        if ($styles->isEmpty()) {
                            return '';
                        }

                        $output = "<!-- Custom Styles for {$target} -->\n";
                        $output .= "<style id=\"custom-styles-{$target}\">\n";
                        $output .= "/* Generated by Custom Style Editor */\n";
                        
                        foreach ($styles as $style) {
                            if ($style->css_content) {
                                $output .= "/* {$style->name} (v{$style->version}) - Priority: {$style->priority} */\n";
                                $output .= $style->css_content . "\n\n";
                            }
                        }
                        
                        $output .= "</style>\n";
                        $output .= "<!-- End Custom Styles for {$target} -->";

                        return $output;
                    } catch (\Exception $e) {
                        // Fail silently in production to prevent breaking the layout
                        if (config('app.debug')) {
                            return "<!-- Custom Styles Error: {$e->getMessage()} -->";
                        }
                        return '';
                    }
                }

                /**
                 * Render styles inline (for dynamic injection)
                 */
                public function renderInline(string $target = 'frontend'): string
                {
                    if (!$this->hasCustomStylesTable()) {
                        return '';
                    }

                    try {
                        $css = CustomStyle::getActiveStyles($target);
                        
                        if (empty($css)) {
                            return '';
                        }

                        return "<style data-custom-styles=\"{$target}\">\n{$css}\n</style>";
                    } catch (\Exception $e) {
                        return config('app.debug') 
                            ? "<!-- Custom Styles Error: {$e->getMessage()} -->" 
                            : '';
                    }
                }

                /**
                 * Get styles as raw CSS string
                 */
                public function getCss(string $target = 'frontend'): string
                {
                    if (!$this->hasCustomStylesTable()) {
                        return '';
                    }

                    try {
                        return CustomStyle::getActiveStyles($target);
                    } catch (\Exception $e) {
                        return '';
                    }
                }

                /**
                 * Check if custom_styles table exists
                 */
                protected function hasCustomStylesTable(): bool
                {
                    try {
                        return Schema::hasTable('custom_styles');
                    } catch (\Exception $e) {
                        return false;
                    }
                }
            };
        });

        // Share with all views
        View::composer('*', function ($view) {
            if (!$view->offsetExists('customStyles')) {
                $view->with('customStyles', app('custom-styles'));
            }
        });
    }
}